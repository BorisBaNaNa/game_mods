GENERAL BEHAVIOURS

- All "Add" procedure in an inventory mean that if the item not exist will create a new
  entry of that item, if already exist, the quantity of two will be added to the old.

- All "AddorReplace" procedure in an inventory mean that given an item, if exist,
  the quantity will be replaced, if not exist will be created a new entry.

- All "Convert" procedure in an inventory will change the name of an item leaving the
  quantity unchanged unlike "Replace" procedure.

---------------------------------------------------------------------------------------------
krastorio.recipes.exist(recipe_name)

Wrapper function of krastorio.recipes.getRecipeFromName(recipe_name), return a boolean instead,
true if the value isn't empty false otherwise

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.getRecipeFromName(recipe_name)

Return the the recipe (the whole table) called with the name given in the argument,
if the recipe doesn't exist, return nil

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.isRecipeVanilla(recipe_name)

Return true(boolean) if the recipes exist in vanilla game, false(boolean) otherwise.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.getCategory(recipe_name)

Return the category name of given recipe indicated by name. If the recipe don't exist
return false(boolean)
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.findNotUnlockableRecipes()

Return a list(table of strings) and print it in factorio log file,
all recipes that are unlockable,
that isn't enabled and there isn't a technology that unlockable them.
---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------
krastorio.recipes.getIngredients(recipe_name)

Return the table of ingredients of one given recipe by name.
If the recipe not exist return an empty table.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.hasIngredient(recipe_name, ingredient_name)

Return true(boolean) if the ingredient is in the ingredients table of recipe,
false(boolean) otherwise.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.hasIngredients(recipe_name, ingredient_names)

Return true(boolean) if all given ingredients name is in the ingredients table of recipe,
false(boolean) otherwise.
ingredient_names must be a table of strings of ingredient names
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.hasNoIngredients(recipe_name)

Return true(boolean) if ingredients table of recipe is empty, false(boolean) otherwise.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.getExpensiveIngredients(recipe_name)

Same behaviour of function krastorio.recipes.getIngredients(recipe_name)
but for expensive ingredients table of a recipe.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.hasExpensiveIngredient(recipe_name, ingredient_name)

Same behaviour of function krastorio.recipes.hasIngredient(recipe_name, ingredient_name)
but for expensive ingredients table of a recipe.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.hasExpensiveIngredients(recipe_name, ingredient_names)

Same behaviour of function krastorio.recipes.hasIngredients(recipe_name, ingredient_names)
but for expensive ingredients table of a recipe.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.hasNoExpensiveIngredients(recipe_name)

Same behaviour of function krastorio.recipes.hasNoIngredients(recipe_name)
but for expensive ingredients table of a recipe.
---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------
krastorio.recipes.resultToResults(recipe_name)

Convert the result of given recipe, in the results format, this is for standardize access
to recipe result/results. If the recipe format is already results, don't do nothing
NOTE: All recipe that have results format must have an icon setted
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.getProducts(recipe_name)

Return the results table if the given recipes exist.
Convert automatically the result format to result
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.hasProduct(recipe_name, product_name)

Return true if the recipe produce the product given by name, false otherwise.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.hasProducts(recipe_name, product_names)

Given a list(table) of item name, return true if the recipe
produce the all products, false otherwise.
---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------
krastorio.recipes.getParsedItem(item)

Parse a given item table with the name that identify each attribute of the item,
and return a new parsed table. Example:
input  {"iron-ore", 1}
output {name="iron-ore", amount=1}
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.mergeParsedItems(item_a, item_b)

Given two items that is parsed(see getParsedItem(item)) will return one item that have
the quantity(amount) sum of two and the catalist and the probability of item_b.
If item_b don't have catalist and the probability but is attribute of item_a, will copy
the attribute of item_a.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.uniteDuplicateItems(items)

Given an inventory, will merge with the function mergeParsedItems(item_a, item_b)
all items that have the same name
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
krastorio.recipes.remove(items, item_name)

If exist, will remove from the given inventory the first item that have the given name.

Return if the removal was done.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.add(items, item)

Will add in the given inventory the item given in the argument. If in the inventory the item
already exist, the quantity will be added.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.replace(items, old_item_name, new_item)

Replace the item in the given inventory that have the name equals to "old_item_name",
with the new_item given. All item attribute will be overrided.

If the item don't exist in the inventory, the item will be not added.

Return if the replacing was done.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addOrReplace(items, old_item_name, new_item)

Will call replace(items, old_item_name, new_item), and if the result is negative,
will do add(items, item)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.convert(items, old_item_name, new_item_name)

If an item with the name "old_item_name" exist in the inventory, will change that name with
the "new_item_name", so all other item attributes will remain unchanged

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.overrideIngredients(recipe_name, new_ingredients)

Remove all item from the inventory and will insert the new given in the list(table)
new_ingredients
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredient(recipe_name, ingredient_name)

Will remove the given ingredient from the inventory,

see remove(items, item_name) for more details
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredients(recipe_name, ingredient_names)

Will remove all given ingredient from the inventory,

see remove(items, item_name) for more details
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredientFromAllRecipes(ingredient_name)

Will remove that ingredient from all recipes loaded in the phase when this function is called

see remove(items, item_name) for more details
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredientsFromAllRecipes(ingredient_names)

Will remove all given ingredients that is in all recipes loaded in the phase
when this function is called

see remove(items, item_name) for more details
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredientWithPrerequisite(recipe_name, ingredient_name)

Remove the ingredient from the recipe and in the technology that
unlock this recipe will remove that ingredient associated technology if exist.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredientsWithPrerequisite(recipe_name, ingredient_names)

Remove the ingredients from the recipe and in the technology that
unlock this recipe will remove all ingredients associated technologies.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredientWithPrerequisiteFromAllRecipes(ingredient_name)

Remove an ingredient from all recipes loaded in the phase when this function is called,
and will remove from all technologies
that require the ingredient associated technology from their prerequisites
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredientsWithPrerequisiteFromAllRecipes(ingredient_names)

Remove the given ingredients from all recipes loaded in the phase when this function is called
and will remove from all technologies
that require the ingredient associated technology from their prerequisites
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
krastorio.recipes.addIngredient(recipe_name, ingredient)

Will add an ingredient to the recipe with some exception:
 - if the ingredient is only the name the amount will be 1
 - if the ingredient already exist in the recipes the amount will be added
 - if the recipe don't exist this function don't do nothing
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addIngredients(recipe_name, ingredients)

Will add all given ingredients to the recipe with some exception:
 - if the ingredient is only the name the amount will be 1
 - if the ingredient already exist in the recipes the amount will be added
 - if the recipe don't exist this function don't do nothing
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addIngredientToAllRecipes(ingredient)

Will add an ingredient to all recipes loaded in the phase when this function is called,
with some exception:
 - if the ingredient is only the name the amount will be 1
 - if the ingredient already exist in the recipes the amount will be added
 - if the recipe don't exist this function don't do nothing
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addIngredientsToAllRecipes(ingredients)

Will add all given ingredients to all recipes loaded in the phase when this function is called,
with some exception:
 - if the ingredient is only the name the amount will be 1
 - if the ingredient already exist in the recipes the amount will be added
 - if the recipe don't exist this function don't do nothing
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

krastorio.recipes.multiplyIngredient(recipe_name, ingredient_name, multiplier)
krastorio.recipes.multiplyIngredients(recipe_name, ingredient_names, multiplier)
krastorio.recipes.multiplyIngredientToAllRecipes(ingredient_name, multiplier)
krastorio.recipes.multiplyIngredientsToAllRecipes(ingredient_names, multiplier)

---------------------------------------------------------------------------------------------
krastorio.recipes.replaceIngredient(recipe_name, old_ingredient_name, new_ingredient)



---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.replaceIngredients(recipe_name, old_ingredient_names, new_ingredients)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.replaceIngredientToAllRecipes(old_ingredient_name, new_ingredient)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.replaceIngredientsToAllRecipes(old_ingredient_names, new_ingredients)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
krastorio.recipes.addOrReplaceIngredient(recipe_name, old_ingredient_name, new_ingredient)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addOrReplaceIngredients(recipe_name, old_ingredient_names, new_ingredients)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addOrReplaceIngredientToAllRecipes(old_ingredient_name, new_ingredient)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addOrReplaceIngredientsToAllRecipes(old_ingredient_names, new_ingredients)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
krastorio.recipes.convertIngredient(recipe_name, old_ingredient_name, new_ingredient_name)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.convertIngredients(recipe_name, old_ingredient_names, new_ingredient_names)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.convertIngredientFromAllRecipes(old_ingredient_name, new_ingredient_name)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.convertIngredientsFromAllRecipes(old_ingredient_names, new_ingredient_names)

---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.removeIngredientFromGroup(group_name, ingredient_name)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addIngredientToGroup(group_name, ingredient)

Will add an ingredient to all recipes in the group with some exception:
 - if the ingredient is only the name the amount will be 1
 - if the ingredient already exist in the recipes the amount will be added
 - if the recipe don't exist this function don't do nothing
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.replaceIngredientToGroup(group_name, old_ingredient_name, new_ingredient)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.addOrReplaceIngredientToGroup(group_name, old_ingredient_name, new_ingredient)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
krastorio.recipes.convertIngredientToGroup(group_name, old_ingredient_name, new_ingredient_name)

---------------------------------------------------------------------------------------------

krastorio.recipes.overrideProducts(recipe_name, new_products, new_expensive_products)

krastorio.recipes.removeProduct(recipe_name, product_name)
krastorio.recipes.removeProducts(recipe_name, product_names)
krastorio.recipes.removeProductFromAllRecipes(product_name)
krastorio.recipes.removeProductsFromAllRecipes(product_names)

krastorio.recipes.addProduct(recipe_name, product)
krastorio.recipes.addProducts(recipe_name, products)
krastorio.recipes.addProductToAllRecipes(product)
krastorio.recipes.addProductsToAllRecipes(products)

krastorio.recipes.multiplyProduct(recipe_name, product_name, multiplier)
krastorio.recipes.multiplyProducts(recipe_name, product_names, multiplier)
krastorio.recipes.multiplyProductToAllRecipes(product_name, multiplier)
krastorio.recipes.multiplyProductsToAllRecipes(product_names, multiplier)

krastorio.recipes.replaceProduct(recipe_name, old_product_name, new_product)
krastorio.recipes.replaceProducts(recipe_name, old_product_names, new_products)
krastorio.recipes.replaceProductToAllRecipes(old_product_name, new_product)
krastorio.recipes.replaceProductsToAllRecipes(old_product_names, new_products)

krastorio.recipes.addOrReplaceProduct(recipe_name, old_product_name, new_product)
krastorio.recipes.addOrReplaceProducts(recipe_name, old_product_names, new_products)
krastorio.recipes.addOrReplaceProductToAllRecipes(old_product_name, new_product)
krastorio.recipes.addOrReplacProductsToAllRecipes(old_product_names, new_products)

krastorio.recipes.convertProduct(recipe_name, old_product_name, new_product_name)
krastorio.recipes.convertProducts(recipe_name, old_product_names, new_product_names)
krastorio.recipes.convertProductFromAllRecipes(old_product_name, new_product_name)
krastorio.recipes.convertProductsFromAllRecipes(old_product_names, new_product_names)

krastorio.recipes.removeProductFromGroup(group_name, product_name)
krastorio.recipes.addProductToGroup(group_name, product)
krastorio.recipes.replaceProductToGroup(group_name, old_product_name, new_product)
krastorio.recipes.addOrReplaceProductToGroup(group_name, old_product_name, new_product)
krastorio.recipes.convertProductToGroup(group_name, old_product_name, new_product_name)

krastorio.recipes.multiplyRecipeStat(recipe_name, multiplier)
krastorio.recipes.existRecipesCategory(category_name)
krastorio.recipes.setCategoryIfExist(recipe_name, category_name)
krastorio.recipes.migrateCategory(old_category_name, new_category_name)
krastorio.recipes.addRecipeToGroup(recipe_name, group_name)
krastorio.recipes.removeRecipeFromGroup(recipe_name, group_name)
krastorio.recipes.setRecipeEnergyCost(recipe_name, energy_cost, expensive_cost)
krastorio.recipes.setRecipeResultCount(recipe_name, result_count)
krastorio.recipes.restoreRecipeToVanilla(recipe_name)
krastorio.recipes.uniteDuplicateItemsOfRecipe(recipe_name)
krastorio.recipes.enable(recipe_name)
krastorio.recipes.disable(recipe_name)
