krastorio.technologies.getPrerequisites(technology_name)
krastorio.technologies.hasPrerequisite(technology_name, prerequisite_name)

krastorio.technologies.getEffects(technology_name)
krastorio.technologies.getTechnologyThatUnlockRecipe(recipe_name)

krastorio.technologies.getResearchUnitIngredients(technology_name)
krastorio.technologies.getResearchUnitCount(technology_name)

krastorio.technologies.exist(technology_name)
krastorio.technologies.getTechnologyFromName(technology_name)

krastorio.technologies.removePrerequisite(technology_name, prerequisite_name_to_remove)
krastorio.technologies.removePrerequisites(technology_name, prerequisite_names_to_remove)
krastorio.technologies.addPrerequisite(technology_name, prerequisite_name)
krastorio.technologies.addPrerequisites(technology_name, prerequisite_names)
krastorio.technologies.convertPrerequisite(technology_name, old_prerequisite_name, new_prerequisite_name)
krastorio.technologies.convertPrerequisiteFromAllTechnologies(old_prerequisite_name, new_prerequisite_name)

krastorio.technologies.removeEffect(technology_name, to_remove_effect)
krastorio.technologies.removeEffects(technology_name, to_remove_effects)
krastorio.technologies.removeEffectFromAllTechnologies(to_remove_effect)
krastorio.technologies.removeAllEffectType(technology_name, to_remove_effect_type)
krastorio.technologies.addEffect(technology_name, new_effect)
krastorio.technologies.addEffects(technology_name, new_effects)
krastorio.technologies.removeUnlockRecipe(technology_name, recipe_name)
krastorio.technologies.removeUnlockRecipes(technology_name, recipe_names)
krastorio.technologies.addUnlockRecipe(technology_name, recipe_name)
krastorio.technologies.addUnlockRecipes(technology_name, recipe_names)
krastorio.technologies.removeUnlockRecipeFromAllTechnologies(recipe_name)

krastorio.technologies.removeResearchUnitIngredient(technology_name, science_pack_name)
krastorio.technologies.addResearchUnitIngredient(technology_name, science_pack_name, count)
krastorio.technologies.convertResearchUnitIngredient(technology_name, old_science_pack_name, new_science_pack_name)

krastorio.technologies.setResearchUnitCount(technology_name, count)

krastorio.technologies.addSciencePackCollection(science_pack_collection_name, science_pack_collection)
krastorio.technologies.sanitizeUnitsOfAllTechnologiesInPacks(science_pack_collection_name, with_vanilla)
krastorio.technologies.removeSciencePackIncompatibleWith(science_pack_name, science_pack_incompatibilities)

krastorio.recipes.findNotUnlockableTechnologies()

krastorio.technologies.enable(technology_name)
krastorio.technologies.disable(technology_name, remove_prerequisites)
